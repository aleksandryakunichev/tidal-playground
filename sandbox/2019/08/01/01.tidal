d1 $ slow 2 $ (s "landr-k*4" |> crush 16 + up "[0 12]*2" |> n 2)

d2 $ slow 4 $ (0.5 <~) $ s "hh*8" |> crush 10 |> speed (choose [0.5, 0.51..2.5]) |> pan (slow 2 $ sine)

d3 $ s "ewavfm-sn/2"

d1 $ (foldEvery' [2, 3] 1) $ s "bd*4"

setcps (120/60)

resetCycles

:t foldEvery

foldEvery' :: [Int] -> Int -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a

foldEvery' ns ofs f p = foldr ((`_every'` ofs) f) p ns

:t flip

:t foldEvery'
